[
    {
        "id": "73619a0e20b766b0",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fa7e41cd5565ceab",
        "type": "tab",
        "label": "Flow 2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "2bc2d46292aae71f",
        "type": "inject",
        "z": "73619a0e20b766b0",
        "name": "Update Weather (every 5min)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 700,
        "wires": [
            [
                "b3cfd559401f9bfa"
            ]
        ]
    },
    {
        "id": "b3cfd559401f9bfa",
        "type": "http request",
        "z": "73619a0e20b766b0",
        "name": "Get Real-time Weather",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/weather?q=Luxembourg&units=metric&appid=dd23ad94f206a6655e4d0dc9f2629032",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 700,
        "wires": [
            [
                "733d598a4f7b149d",
                "c27f425065c71028"
            ]
        ]
    },
    {
        "id": "c27f425065c71028",
        "type": "debug",
        "z": "73619a0e20b766b0",
        "name": "Weather API Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 640,
        "wires": []
    },
    {
        "id": "733d598a4f7b149d",
        "type": "function",
        "z": "73619a0e20b766b0",
        "name": "Extract Weather Data",
        "func": "// Check if we have valid data\nif (!msg.payload || !msg.payload.main || !msg.payload.weather) {\n    node.error(\"Invalid weather data received\");\n    return null;\n}\n\n// Extract and format data\nconst weather = msg.payload;\n\n// Current time\nconst now = new Date();\nconst hours = now.getHours();\nconst minutes = now.getMinutes();\nconst timeStr = hours + ':' + (minutes < 10 ? '0' : '') + minutes;\n\n// Round temperature to nearest integer\nconst temperature = Math.round(weather.main.temp);\n\n// Store all data in flow context\nflow.set('temperature', temperature + 'Â°C');\nflow.set('humidity', weather.main.humidity + '%');\nflow.set('wind', Math.round(weather.wind.speed) + ' km/h');\n\n// Ensure we have weather description\nlet description = \"Unknown\";\nif (weather.weather && weather.weather.length > 0 && weather.weather[0].description) {\n    description = weather.weather[0].description;\n}\nflow.set('description', description);\n\n// Store city name and current time\nflow.set('city', weather.name + ' ' + timeStr);\n\n// Store current time separately for time display\nflow.set('current_time', timeStr);\n\n// Set default display mode if not set\nif (!flow.get('display_mode')) {\n    flow.set('display_mode', 'temperature');\n}\n\n// Get switches mode - check if switches have changed\nconst switchesMode = flow.get('switches_mode') || 'time';\n\n// Send current switches mode to the display handler\nmsg.payload = switchesMode;\n\n// Add last_updated timestamp to track successful updates\nflow.set('last_updated', Date.now());\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 700,
        "wires": [
            [
                "1996b9100a3bb7f4",
                "b43b064180d72d86"
            ]
        ]
    },
    {
        "id": "b43b064180d72d86",
        "type": "debug",
        "z": "73619a0e20b766b0",
        "name": "Weather Data Processed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 640,
        "wires": []
    },
    {
        "id": "33bac39479946e4c",
        "type": "inject",
        "z": "73619a0e20b766b0",
        "name": "Error Recovery (every hour)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0,
        "topic": "",
        "payload": "check",
        "payloadType": "str",
        "x": 200,
        "y": 760,
        "wires": [
            [
                "1d5642a82f5f8ae0"
            ]
        ]
    },
    {
        "id": "1d5642a82f5f8ae0",
        "type": "function",
        "z": "73619a0e20b766b0",
        "name": "Check Last Update Time",
        "func": "// Get last update timestamp\nconst lastUpdated = flow.get('last_updated') || 0;\nconst now = Date.now();\n\n// If no update in the last 20 minutes (1200000ms), force refresh\nif (now - lastUpdated > 1200000) {\n    node.warn(\"No weather updates for 20+ minutes. Forcing refresh.\");\n    // Set payload to trigger a new weather fetch\n    msg.payload = Date.now();\n    return msg;\n}\n\n// Otherwise no need to do anything\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 760,
        "wires": [
            [
                "b3cfd559401f9bfa"
            ]
        ]
    },
    {
        "id": "7cc62c26b68a04ba",
        "type": "comment",
        "z": "73619a0e20b766b0",
        "name": "WEATHER DATA SECTION",
        "info": "",
        "x": 190,
        "y": 600,
        "wires": []
    },
    {
        "id": "3e8f8cd8f307e956",
        "type": "inject",
        "z": "73619a0e20b766b0",
        "name": "Initialize & Clear LCD",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload",
                "vt": "str",
                "v": ""
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "init",
        "x": 200,
        "y": 820,
        "wires": [
            [
                "d72a326f373d8fc1"
            ]
        ]
    },
    {
        "id": "d72a326f373d8fc1",
        "type": "exec",
        "z": "73619a0e20b766b0",
        "command": "python /home/star2050/digilab/lcd/init.py",
        "addpay": "",
        "append": "--line 1 --message \"Initializing...\" && python /home/star2050/digilab/lcd/init.py --line 2 --message \"Please wait\"",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Run Init/Clear Script",
        "x": 450,
        "y": 820,
        "wires": [
            [
                "21f554a9c2ef9cce"
            ],
            [
                "4c9ad6a9d113f758"
            ],
            [
                "5af4fd7514fecd4c"
            ]
        ]
    },
    {
        "id": "21f554a9c2ef9cce",
        "type": "debug",
        "z": "73619a0e20b766b0",
        "name": "Init stdout",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 680,
        "y": 780,
        "wires": []
    },
    {
        "id": "4c9ad6a9d113f758",
        "type": "debug",
        "z": "73619a0e20b766b0",
        "name": "Init stderr",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 680,
        "y": 820,
        "wires": []
    },
    {
        "id": "5af4fd7514fecd4c",
        "type": "debug",
        "z": "73619a0e20b766b0",
        "name": "Init RC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 670,
        "y": 860,
        "wires": []
    },
    {
        "id": "354130156739c815",
        "type": "comment",
        "z": "73619a0e20b766b0",
        "name": "LCD DISPLAY SECTION",
        "info": "",
        "x": 200,
        "y": 940,
        "wires": []
    },
    {
        "id": "8d96462219076cd8",
        "type": "inject",
        "z": "73619a0e20b766b0",
        "name": "Update Display (every second)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "update_display",
        "payloadType": "str",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "1996b9100a3bb7f4"
            ]
        ]
    },
    {
        "id": "1996b9100a3bb7f4",
        "type": "function",
        "z": "73619a0e20b766b0",
        "name": "Update Display Based on Mode",
        "func": "// Get current switches mode\nconst switchesMode = flow.get('switches_mode') || 'time';\n\n// DEBUG mode\nnode.log(\"DISPLAY HANDLER - Current mode: \" + switchesMode);\n\n// Get weather display mode (only applies when in weather mode)\nconst weatherMode = flow.get('weather_mode') || 'temperature';\n\n// Get data from flow context\nconst temperature = flow.get('temperature') || 'N/A';\nconst humidity = flow.get('humidity') || 'N/A';\nconst wind = flow.get('wind') || 'N/A';\nconst description = flow.get('description') || 'N/A';\nconst city = flow.get('city') || 'Connecting...';\n\n// Time-specific data\nconst now = new Date();\nconst hours = now.getHours();\nconst minutes = now.getMinutes();\nconst seconds = now.getSeconds();\nconst timeStr = hours + ':' + (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\nconst dateStr = now.toLocaleDateString('de-DE');\n\n// Clean function to remove/replace problematic characters\nfunction cleanText(text) {\n    if (typeof text !== 'string') return 'N/A';\n    \n    // Replace HTML entities and problematic characters\n    return text\n        .replace(/&#x2F;/g, '|')         // Replace HTML entity for slash\n        .replace(/&#(\\d+);/g, '')        // Remove all other HTML entities\n        .replace(/[^\\x20-\\x7E]/g, '')    // Keep only basic ASCII characters\n        .replace(/[^\\w\\s.,Â°%\\/-:]/g, ''); // Keep only alphanumeric, spaces, and some symbols\n}\n\n// Ensure values are strings and limit to display width (16 chars for standard LCD)\nfunction formatForDisplay(text, maxLength = 16) {\n    let cleaned = cleanText(String(text));\n    return cleaned.length > maxLength ? cleaned.substring(0, maxLength) : cleaned;\n}\n\n// Clean all displayed text\nconst cleanCity = formatForDisplay(city);\nconst cleanTemp = formatForDisplay(temperature);\nconst cleanHumidity = formatForDisplay(humidity);\nconst cleanWind = formatForDisplay(wind);\nconst cleanTimeStr = formatForDisplay(timeStr);\nconst cleanDateStr = formatForDisplay(dateStr);\n\n// Special formatting for description - capitalize first letter\nlet cleanDescription = formatForDisplay(description);\nif (cleanDescription.length > 0) {\n    cleanDescription = cleanDescription.charAt(0).toUpperCase() + cleanDescription.slice(1);\n}\n\n// Prepare messages for line 1 and 2\nlet line1;\nlet line2;\n\n// Mode 1: Time display (both switches OFF)\nif (switchesMode === 'time') {\n    line1 = { payload: \"Datum : \"+cleanDateStr, line: 1 };\n    line2 = { payload:  cleanTimeStr, line: 2 };\n    node.log(\"Display set to TIME mode\");\n}\n// Mode 2: Weather display (switch 1 ON, switch 2 OFF)\nelse if (switchesMode === 'weather') {\n    // Sub-modes for weather display based on weatherMode\n    node.log(\"Display set to WEATHER mode, sub-mode: \" + weatherMode);\n    switch(weatherMode) {\n        case 'temperature':\n            line1 = { payload: \"Temperatur\", line: 1 };\n            line2 = { payload: cleanTemp, line: 2 };\n            break;\n        case 'humidity':\n            line1 = { payload: \"Luftfeuchtigkeit\", line: 1 };\n            line2 = { payload: cleanHumidity, line: 2 };\n            break;\n        case 'wind':\n            line1 = { payload: \"Windgeschwindigk.\", line: 1 };\n            line2 = { payload: cleanWind, line: 2 };\n            break;\n        case 'description':\n            line1 = { payload: \"Wetterlage\", line: 1 };\n            line2 = { payload: cleanDescription, line: 2 };\n            break;\n        default:\n            line1 = { payload: \"Temperatur\", line: 1 };\n            line2 = { payload: cleanTemp, line: 2 };\n    }\n}\n// Mode 3: System info (switch 1 OFF, switch 2 ON)\nelse if (switchesMode === 'system') {\n    // Get uptime using 'uptime' command\n    node.log(\"Display set to SYSTEM mode\");\n    //const execSync = require('child_process').execSync;\n    let systemInfo;\n    try {\n        // Try to get system info\n        systemInfo = \"System aktiv\";\n    } catch (e) {\n        systemInfo = \"System Info N/A\";\n    }\n    \n    line1 = { payload: \"System Info\", line: 1 };\n    line2 = { payload: formatForDisplay(systemInfo), line: 2 };\n}\n\n// Mode 4: Custom message (both switches ON)\nelse if (switchesMode === 'custom') {\n    node.log(\"Display set to CUSTOM mode\");\n    line1 = { payload: \"Benutzerdefiniert\", line: 1 };\n    line2 = { payload: \"Hallo Welt!\", line: 2 };\n}\n// Default fallback to time display\nelse {\n    node.warn(\"Unknown mode: \" + switchesMode + \", defaulting to TIME\");\n    line1 = { payload: \"Datum\", line: 1 };\n    line2 = { payload: cleanDateStr + \" \" + cleanTimeStr, line: 2 };\n}\n\n// Return both messages as array\nreturn [line1, line2];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 980,
        "wires": [
            [
                "cd04a40c673c7eee"
            ],
            [
                "5a891e0d105c5864"
            ]
        ]
    },
    {
        "id": "cd04a40c673c7eee",
        "type": "template",
        "z": "73619a0e20b766b0",
        "name": "Build Write Command",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": " --line \"{{line}}\" --message \"{{payload}}\"",
        "output": "str",
        "x": 1560,
        "y": 980,
        "wires": [
            [
                "37d4dde3f2ade25d",
                "02785858b756d613"
            ]
        ]
    },
    {
        "id": "5a891e0d105c5864",
        "type": "delay",
        "z": "73619a0e20b766b0",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1470,
        "y": 1060,
        "wires": [
            [
                "cd04a40c673c7eee"
            ]
        ]
    },
    {
        "id": "37d4dde3f2ade25d",
        "type": "exec",
        "z": "73619a0e20b766b0",
        "command": "python /home/star2050/digilab/lcd/write.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Run Write Script",
        "x": 1840,
        "y": 980,
        "wires": [
            [
                "0b7b303e8658b7e5"
            ],
            [
                "7316b9a11ecd1b87"
            ],
            [
                "d508ef3e520866ee"
            ]
        ]
    },
    {
        "id": "02785858b756d613",
        "type": "debug",
        "z": "73619a0e20b766b0",
        "name": "Debug Write Command",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1870,
        "y": 920,
        "wires": []
    },
    {
        "id": "0b7b303e8658b7e5",
        "type": "debug",
        "z": "73619a0e20b766b0",
        "name": "Write stdout",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 2070,
        "y": 960,
        "wires": []
    },
    {
        "id": "7316b9a11ecd1b87",
        "type": "debug",
        "z": "73619a0e20b766b0",
        "name": "Write stderr",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 2070,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d508ef3e520866ee",
        "type": "debug",
        "z": "73619a0e20b766b0",
        "name": "Write RC",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 2060,
        "y": 1040,
        "wires": []
    },
    {
        "id": "310a38239b5a85ec",
        "type": "comment",
        "z": "73619a0e20b766b0",
        "name": "SWITCH INPUT SECTION",
        "info": "",
        "x": 170,
        "y": 1180,
        "wires": []
    },
    {
        "id": "297a65f921de75d9",
        "type": "rpi-gpio in",
        "z": "73619a0e20b766b0",
        "name": "Mode Switch Button",
        "pin": "16",
        "intype": "up",
        "debounce": "100",
        "read": false,
        "bcm": true,
        "x": 160,
        "y": 1080,
        "wires": [
            [
                "172f611c7655f1aa",
                "4099fe7620e04b1d"
            ]
        ]
    },
    {
        "id": "172f611c7655f1aa",
        "type": "function",
        "z": "73619a0e20b766b0",
        "name": "Cycle Through Weather Modes",
        "func": "// Only process when button is pressed (rising edge)\nif (msg.payload !== 1) return null;\n\n// Only cycle weather modes if we're in weather display mode\nconst switchesMode = flow.get('switches_mode') || 'time';\nif (switchesMode !== 'weather') {\n    // We're not in weather mode, so button does nothing\n    return null;\n}\n\n// Get current mode\nconst currentMode = flow.get('weather_mode') || 'temperature';\n\n// Define the cycle order - limited to just 4 essential modes\nconst modes = ['temperature', 'humidity', 'wind', 'description'];\n\n// Track button press count to prevent excessive cycling\nlet pressCount = flow.get('button_press_count') || 0;\npressCount++;\n\n// Store press count for debouncing purposes\nflow.set('button_press_count', pressCount);\nflow.set('last_button_press', Date.now());\n\n// Find current index\nlet currentIndex = modes.indexOf(currentMode);\n\n// If current mode not found in array, default to first mode\nif (currentIndex === -1) currentIndex = 0;\n\n// Move to next mode (or back to first if at end)\n// This ensures limited cycling through only 4 modes\nlet nextIndex = (currentIndex + 1) % modes.length;\n\n// Set the next mode\nconst nextMode = modes[nextIndex];\nflow.set('weather_mode', nextMode);\nmsg.payload = nextMode;\n\n// Also log mode change\nnode.log(\"Weather display mode changed to: \" + nextMode + \" (press #\" + pressCount + \")\");\n\n// Return the message with the new mode\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1080,
        "wires": [
            [
                "1996b9100a3bb7f4",
                "e0337f99aca4f801"
            ]
        ]
    },
    {
        "id": "4099fe7620e04b1d",
        "type": "debug",
        "z": "73619a0e20b766b0",
        "name": "Button Press",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 1120,
        "wires": []
    },
    {
        "id": "e0337f99aca4f801",
        "type": "debug",
        "z": "73619a0e20b766b0",
        "name": "Mode Changed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1080,
        "wires": []
    },
    {
        "id": "789c0aec48a6fb3d",
        "type": "rpi-gpio in",
        "z": "73619a0e20b766b0",
        "name": "switch2",
        "pin": "20",
        "intype": "up",
        "debounce": "50",
        "read": true,
        "bcm": true,
        "x": 140,
        "y": 1220,
        "wires": [
            [
                "b63af0586ec5ebf7"
            ]
        ]
    },
    {
        "id": "3c5df00822c9a005",
        "type": "rpi-gpio in",
        "z": "73619a0e20b766b0",
        "name": "switch1",
        "pin": "21",
        "intype": "up",
        "debounce": "50",
        "read": true,
        "bcm": true,
        "x": 140,
        "y": 1280,
        "wires": [
            [
                "b63af0586ec5ebf7"
            ]
        ]
    },
    {
        "id": "b63af0586ec5ebf7",
        "type": "function",
        "z": "73619a0e20b766b0",
        "name": "Process Switch Changes",
        "func": "// Process input from GPIO pins\n// Check if the message has pin information in the topic\nconst isPinTopic = msg.topic && (msg.topic.includes(\"20\") || msg.topic.includes(\"21\"));\n\n// Store switch states based on pin number or explicit topic\nif (msg.topic === 'schalter1' || (isPinTopic && msg.topic.includes(\"21\"))) {\n    // For pull-up resistors: 0 = pressed/ON, 1 = not pressed/OFF\n    // If using pull-up, logical state is inverse of electrical state\n    flow.set('switch1', msg.payload === 0 ? 1 : 0);\n    node.log(\"Switch 1 set to: \" + flow.get('switch1') + \" (GPIO: \" + msg.payload + \")\");\n} else if (msg.topic === 'schalter2' || (isPinTopic && msg.topic.includes(\"20\"))) {\n    flow.set('switch2', msg.payload === 0 ? 1 : 0);\n    node.log(\"Switch 2 set to: \" + flow.get('switch2') + \" (GPIO: \" + msg.payload + \")\");\n} else {\n    node.log(\"Unknown switch input: \" + JSON.stringify({topic: msg.topic, payload: msg.payload}));\n}\n\n// Get current switch states\nconst switch1 = flow.get('switch1') || 0;\nconst switch2 = flow.get('switch2') || 0;\n\n// Determine display mode based on switch positions\nlet mode;\nif (switch1 === 0 && switch2 === 0) mode = 'time';       // Both OFF\nelse if (switch1 === 1 && switch2 === 0) mode = 'weather';  // Switch 1 ON\nelse if (switch1 === 0 && switch2 === 1) mode = 'system';   // Switch 2 ON\nelse if (switch1 === 1 && switch2 === 1) mode = 'custom';   // Both ON\nelse {\n    mode = 'time';  // Default fallback\n    node.warn(\"Invalid switch values: S1=\" + switch1 + \", S2=\" + switch2);\n}\n\n// Update mode and return message\nflow.set('switches_mode', mode);\nreturn { payload: mode, topic: 'mode_change' };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Initialize switch states\nflow.set('switch1', 0);\nflow.set('switch2', 0);\nflow.set('switches_mode', 'time');\nnode.log(\"Switch states initialized\");",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1250,
        "wires": [
            [
                "1996b9100a3bb7f4",
                "12688aa26a04e5ca"
            ]
        ]
    },
    {
        "id": "12688aa26a04e5ca",
        "type": "debug",
        "z": "73619a0e20b766b0",
        "name": "Switch Mode Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1250,
        "wires": []
    },
    {
        "id": "fb6ee8daa34f356e",
        "type": "inject",
        "z": "fa7e41cd5565ceab",
        "name": "Update Weather (every 5min)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "ae263271ad2da54a"
            ]
        ]
    },
    {
        "id": "ae263271ad2da54a",
        "type": "http request",
        "z": "fa7e41cd5565ceab",
        "name": "Get Real-time Weather",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/weather?q=Luxembourg&units=metric&appid=dd23ad94f206a6655e4d0dc9f2629032",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "1b2247d8010a5ca5",
                "e55c99f6a2c66318"
            ]
        ]
    },
    {
        "id": "e55c99f6a2c66318",
        "type": "debug",
        "z": "fa7e41cd5565ceab",
        "name": "Weather API Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 100,
        "wires": []
    },
    {
        "id": "1b2247d8010a5ca5",
        "type": "function",
        "z": "fa7e41cd5565ceab",
        "name": "Extract Weather Data",
        "func": "// Check if we have valid data\nif (!msg.payload || !msg.payload.main || !msg.payload.weather) {\n    node.error(\"Invalid weather data received\");\n    return null;\n}\n\n// Extract and format data\nconst weather = msg.payload;\n\n// Current time\nconst now = new Date();\nconst hours = now.getHours();\nconst minutes = now.getMinutes();\nconst timeStr = hours + ':' + (minutes < 10 ? '0' : '') + minutes;\n\n// Round temperature to nearest integer\nconst temperature = Math.round(weather.main.temp);\n\n// Store all data in flow context\nflow.set('temperature', temperature + 'Â°C');\nflow.set('humidity', weather.main.humidity + '%');\nflow.set('wind', Math.round(weather.wind.speed) + ' km/h');\n\n// Ensure we have weather description\nlet description = \"Unknown\";\nif (weather.weather && weather.weather.length > 0 && weather.weather[0].description) {\n    description = weather.weather[0].description;\n}\nflow.set('description', description);\n\n// Store city name and current time\nflow.set('city', weather.name + ' ' + timeStr);\n\n// Set default display mode if not set\nif (!flow.get('display_mode')) {\n    flow.set('display_mode', 'temperature');\n}\n\n// Send current display mode to the display handler\nmsg.payload = flow.get('display_mode');\n\n// Add last_updated timestamp to track successful updates\nflow.set('last_updated', Date.now());\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 160,
        "wires": [
            [
                "13b9f24fe92121be",
                "67daf24ae17cc899"
            ]
        ]
    },
    {
        "id": "67daf24ae17cc899",
        "type": "debug",
        "z": "fa7e41cd5565ceab",
        "name": "Weather Data Processed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 100,
        "wires": []
    },
    {
        "id": "a6fa13a3e71c899b",
        "type": "inject",
        "z": "fa7e41cd5565ceab",
        "name": "Initialize & Clear LCD",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload",
                "vt": "str",
                "v": ""
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "init",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "672637f87c614915"
            ]
        ]
    },
    {
        "id": "672637f87c614915",
        "type": "exec",
        "z": "fa7e41cd5565ceab",
        "command": "python /home/star2050/digilab/lcd/init.py",
        "addpay": "",
        "append": "--line 1 --message \"Initializing...\" && python /home/star2050/digilab/lcd/init.py --line 2 --message \"Please wait\"",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Run Init/Clear Script",
        "x": 420,
        "y": 280,
        "wires": [
            [
                "8aa95754f430fa79"
            ],
            [
                "952ff3f72cd38408"
            ],
            [
                "8a15fec6da7dfbb6"
            ]
        ]
    },
    {
        "id": "f90fee67abce26fb",
        "type": "template",
        "z": "fa7e41cd5565ceab",
        "name": "Build Write Command",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": " --line \"{{line}}\" --message \"{{payload}}\"",
        "output": "str",
        "x": 1340,
        "y": 440,
        "wires": [
            [
                "fb91b77cfd7929a6",
                "4ff29c8700dbdb3d"
            ]
        ]
    },
    {
        "id": "fb91b77cfd7929a6",
        "type": "exec",
        "z": "fa7e41cd5565ceab",
        "command": "python /home/star2050/digilab/lcd/write.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Run Write Script",
        "x": 1600,
        "y": 440,
        "wires": [
            [
                "05a44b2e3304aa0f"
            ],
            [
                "288dc3df1f88a945"
            ],
            [
                "1ec97ac95c2b6c06"
            ]
        ]
    },
    {
        "id": "8aa95754f430fa79",
        "type": "debug",
        "z": "fa7e41cd5565ceab",
        "name": "Init stdout",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 650,
        "y": 240,
        "wires": []
    },
    {
        "id": "952ff3f72cd38408",
        "type": "debug",
        "z": "fa7e41cd5565ceab",
        "name": "Init stderr",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 650,
        "y": 280,
        "wires": []
    },
    {
        "id": "8a15fec6da7dfbb6",
        "type": "debug",
        "z": "fa7e41cd5565ceab",
        "name": "Init RC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 640,
        "y": 320,
        "wires": []
    },
    {
        "id": "05a44b2e3304aa0f",
        "type": "debug",
        "z": "fa7e41cd5565ceab",
        "name": "Write stdout",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1830,
        "y": 420,
        "wires": []
    },
    {
        "id": "288dc3df1f88a945",
        "type": "debug",
        "z": "fa7e41cd5565ceab",
        "name": "Write stderr",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1830,
        "y": 460,
        "wires": []
    },
    {
        "id": "1ec97ac95c2b6c06",
        "type": "debug",
        "z": "fa7e41cd5565ceab",
        "name": "Write RC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1820,
        "y": 500,
        "wires": []
    },
    {
        "id": "4ff29c8700dbdb3d",
        "type": "debug",
        "z": "fa7e41cd5565ceab",
        "name": "Debug Write Command",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1630,
        "y": 380,
        "wires": []
    },
    {
        "id": "13b9f24fe92121be",
        "type": "function",
        "z": "fa7e41cd5565ceab",
        "name": "Update Display Based on Mode",
        "func": "// Get current display mode\nconst mode = msg.payload;\nflow.set('display_mode', mode);\n\n// Get data from flow context\nconst temperature = flow.get('temperature') || 'N/A';\nconst humidity = flow.get('humidity') || 'N/A';\nconst wind = flow.get('wind') || 'N/A';\nconst description = flow.get('description') || 'N/A';\nconst city = flow.get('city') || 'Connecting...';\n\n// Clean function to remove/replace problematic characters\nfunction cleanText(text) {\n    if (typeof text !== 'string') return 'N/A';\n    \n    // Replace HTML entities and problematic characters\n    return text\n        .replace(/&#x2F;/g, '|')         // Replace HTML entity for slash\n        .replace(/&#(\\d+);/g, '')        // Remove all other HTML entities\n        .replace(/[^\\x20-\\x7E]/g, '')    // Keep only basic ASCII characters\n        .replace(/[^\\w\\s.,Â°%\\/-]/g, ''); // Keep only alphanumeric, spaces, and some symbols\n}\n\n// Ensure values are strings and limit to display width (16 chars for standard LCD)\nfunction formatForDisplay(text, maxLength = 16) {\n    let cleaned = cleanText(String(text));\n    return cleaned.length > maxLength ? cleaned.substring(0, maxLength) : cleaned;\n}\n\n// Clean all displayed text\nconst cleanCity = formatForDisplay(city);\nconst cleanTemp = formatForDisplay(temperature);\nconst cleanHumidity = formatForDisplay(humidity);\nconst cleanWind = formatForDisplay(wind);\n\n// Special formatting for description - capitalize first letter\nlet cleanDescription = formatForDisplay(description);\nif (cleanDescription.length > 0) {\n    cleanDescription = cleanDescription.charAt(0).toUpperCase() + cleanDescription.slice(1);\n}\n\n// Prepare messages for line 1 and 2\nlet line1;\nlet line2;\n\n// Set content based on mode - now show mode on line 1 and data on line 2\nswitch(mode) {\n    case 'temperature':\n        line1 = { payload: \"Temperatur\", line: 1 };\n        line2 = { payload: cleanTemp, line: 2 };\n        break;\n    case 'humidity':\n        line1 = { payload: \"Luftfeuchtigkeit\", line: 1 };\n        line2 = { payload: cleanHumidity, line: 2 };\n        break;\n    case 'wind':\n        line1 = { payload: \"Windgeschwindigk.\", line: 1 };\n        line2 = { payload: cleanWind, line: 2 };\n        break;\n    case 'description':\n        line1 = { payload: \"Wetterlage\", line: 1 };\n        line2 = { payload: cleanDescription, line: 2 };\n        break;\n    case 'city':\n        line1 = { payload: \"Standort & Zeit\", line: 1 };\n        line2 = { payload: cleanCity, line: 2 };\n        break;\n    default:\n        line1 = { payload: \"Temperatur\", line: 1 };\n        line2 = { payload: cleanTemp, line: 2 };\n}\n\n// Return both messages as array\nreturn [line1, line2];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 280,
        "wires": [
            [
                "f90fee67abce26fb"
            ],
            [
                "d2a922c34b10889d"
            ]
        ]
    },
    {
        "id": "db392f83bdc92c9c",
        "type": "rpi-gpio in",
        "z": "fa7e41cd5565ceab",
        "name": "Mode Switch Button",
        "pin": "16",
        "intype": "up",
        "debounce": "100",
        "read": false,
        "bcm": true,
        "x": 140,
        "y": 420,
        "wires": [
            [
                "885b20d05f14619c",
                "b988d94fbf0c2186"
            ]
        ]
    },
    {
        "id": "885b20d05f14619c",
        "type": "function",
        "z": "fa7e41cd5565ceab",
        "name": "Cycle Through Display Modes",
        "func": "// Only process when button is pressed (rising edge)\nif (msg.payload !== 1) return null;\n\n// Get current mode\nconst currentMode = flow.get('display_mode') || 'temperature';\n\n// Define the cycle order - limited to just 4 essential modes\nconst modes = ['temperature', 'humidity', 'wind', 'description'];\n\n// Track button press count to prevent excessive cycling\nlet pressCount = flow.get('button_press_count') || 0;\npressCount++;\n\n// Store press count for debouncing purposes\nflow.set('button_press_count', pressCount);\nflow.set('last_button_press', Date.now());\n\n// Find current index\nlet currentIndex = modes.indexOf(currentMode);\n\n// If current mode not found in array, default to first mode\nif (currentIndex === -1) currentIndex = 0;\n\n// Move to next mode (or back to first if at end)\n// This ensures limited cycling through only 4 modes\nlet nextIndex = (currentIndex + 1) % modes.length;\n\n// Set the next mode\nconst nextMode = modes[nextIndex];\nflow.set('display_mode', nextMode);\nmsg.payload = nextMode;\n\n// Also log mode change\nnode.log(\"Display mode changed to: \" + nextMode + \" (press #\" + pressCount + \")\");\n\n// Return the message with the new mode\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 420,
        "wires": [
            [
                "13b9f24fe92121be",
                "3891f2a1e6544f77"
            ]
        ]
    },
    {
        "id": "b988d94fbf0c2186",
        "type": "debug",
        "z": "fa7e41cd5565ceab",
        "name": "Button Press",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 460,
        "wires": []
    },
    {
        "id": "3891f2a1e6544f77",
        "type": "debug",
        "z": "fa7e41cd5565ceab",
        "name": "Mode Changed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 420,
        "wires": []
    },
    {
        "id": "f5b22d78e2c1a123",
        "type": "inject",
        "z": "fa7e41cd5565ceab",
        "name": "Error Recovery (every hour)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0,
        "topic": "",
        "payload": "check",
        "payloadType": "str",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "9c76e11a3254fb82"
            ]
        ]
    },
    {
        "id": "9c76e11a3254fb82",
        "type": "function",
        "z": "fa7e41cd5565ceab",
        "name": "Check Last Update Time",
        "func": "// Get last update timestamp\nconst lastUpdated = flow.get('last_updated') || 0;\nconst now = Date.now();\n\n// If no update in the last 20 minutes (1200000ms), force refresh\nif (now - lastUpdated > 1200000) {\n    node.warn(\"No weather updates for 20+ minutes. Forcing refresh.\");\n    // Set payload to trigger a new weather fetch\n    msg.payload = Date.now();\n    return msg;\n}\n\n// Otherwise no need to do anything\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 220,
        "wires": [
            [
                "ae263271ad2da54a"
            ]
        ]
    },
    {
        "id": "d2a922c34b10889d",
        "type": "delay",
        "z": "fa7e41cd5565ceab",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1200,
        "y": 320,
        "wires": [
            [
                "f90fee67abce26fb"
            ]
        ]
    },
    {
        "id": "a9ed5169ce53b36e",
        "type": "rpi-gpio in",
        "z": "fa7e41cd5565ceab",
        "name": "Schalter 2",
        "pin": "20",
        "intype": "tri",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 130,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "e4e609f0cd636984",
        "type": "rpi-gpio in",
        "z": "fa7e41cd5565ceab",
        "name": "Schalter 1",
        "pin": "21",
        "intype": "tri",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 130,
        "y": 620,
        "wires": [
            []
        ]
    }
]